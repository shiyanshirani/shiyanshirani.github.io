{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shiyan Shirani",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "bits of work & life.",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,

    "author":  {
        "name": "Shiyan Shirani",
        "url": null,
        "avatar": null
    },

"items": [

        {
            "id": "http://localhost:4000/2023/02/02/low-level-python-operations",
            "title": "you're going to love dis",
            "summary": null,
            "content_text": "I always used to wonder how python is interpreted and how does it exactly work under the hood during my journey of learning Python.As Python is an interpreted language, I was wondered how this the interpretation works under the hood.  The best practise is to reverse engineer the problem to its component parts. This is going to take it to the byte level.The dis module supports the analysis of CPython bytecode by disassembling it, with the help of dis you can see what byte level operations are being done by your code.Enough details, let’s see it in action. I made a foo.py file with a very trivial function for showcasing.import dis def run(x: int) -&gt; int:    return x + 1if __name__ == \"__main__\":    dis.dis(run) &gt;&gt; python foo.py 4   0 LOAD_FAST                0 (x)     2 LOAD_CONST               1 (1)     4 BINARY_ADD     6 RETURN_VALUELOAD_FAST: is used for local variables, accessing the value in an array by index LOAD_CONST:",
            "content_html": "<p>I always used to wonder how python is interpreted and how does it exactly work under the hood during my journey of learning Python.As Python is an interpreted language, I was wondered how this the interpretation works under the hood.</p><blockquote>  <p>The best practise is to reverse engineer the problem to its component parts. This is going to take it to the byte level.</p></blockquote><p>The dis module supports the analysis of <code>CPython</code> bytecode by disassembling it, with the help of <code>dis</code> you can see what byte level operations are being done by your code.<br /><br /></p><p>Enough details, let’s see it in action. I made a <code>foo.py</code> file with a very trivial function for showcasing.</p><pre><code class=\"language-python3\">import dis def run(x: int) -&gt; int:    return x + 1if __name__ == \"__main__\":    dis.dis(run) </code></pre><pre><code class=\"language-bash\">&gt;&gt; python foo.py 4   0 LOAD_FAST                0 (x)     2 LOAD_CONST               1 (1)     4 BINARY_ADD     6 RETURN_VALUE</code></pre><p><strong>LOAD_FAST</strong>: is used for local variables, accessing the value in an array by index <br /><strong>LOAD_CONST</strong>:</p>",
            "url": "http://localhost:4000/2023/02/02/low-level-python-operations",





            "date_published": "2023-02-02T00:00:00+05:30",
            "date_modified": "2023-02-02T00:00:00+05:30",

                "author":  {
                "name": "Shiyan Shirani",
                "url": null,
                "avatar": null
                }


        },

        {
            "id": "http://localhost:4000/2023/01/02/neo-brutualism-art",
            "title": "Neo-Brutualism Art",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2023/01/02/neo-brutualism-art",



            "tags": ["life","art"],

            "date_published": "2023-01-02T00:00:00+05:30",
            "date_modified": "2023-01-02T00:00:00+05:30",

                "author":  {
                "name": "Shiyan Shirani",
                "url": null,
                "avatar": null
                }


        },

        {
            "id": "http://localhost:4000/2022/12/14/semantic-searches",
            "title": "Semantic Searches",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2022/12/14/semantic-searches",





            "date_published": "2022-12-14T00:00:00+05:30",
            "date_modified": "2022-12-14T00:00:00+05:30",

                "author":  {
                "name": "Shiyan Shirani",
                "url": null,
                "avatar": null
                }


        },

        {
            "id": "http://localhost:4000/2022/11/28/setting-up-dev-environment",
            "title": "Setting up my dev environment",
            "summary": null,
            "content_text": "Configuration that I mention here are tailored in such a manner that I seek comfort in.You can find all my configuration in dotfiles repository which I try to keep updated on frequent basis.      MacBook Pro 2020 (Intel) - with this being my daily driver for work as well has personal use, it never failed me to get the work done with ease, if only I could ask for update is for Finder, sometimes it could get a lot more difficult to do the straight-forward chores.        alacritty - the most light-weighted terminal ever came across, as it is a terminal emulator it doesn’t come with tab support so for that I complement it with tmux with a cheeky way of using keymapings found on Josh Medeski’s notion        yabai - a tiling management tool that snaps in tiles at lightining-fast speed which puts the native full-screen app tiling for macOS to absolute shame. it’s i3 for unix. I twin it with skhd for keymapping with the addition of system-wide maps.        nvim/vim - personalized development environment (PDE). small-dive into my most used plugins and story time        firefox -  os:         macOS Ventura (13.0.1)shell:      zshterminal:   alacrittywm:         yabai/divOne of the hobbies I had way back since 2016 was for keyboards,  I spent ridiculous numbers of hours star-gazing r/mkindia and r/MechanicalKeyboards, So I bought Gamakay TK68 in 2020 and geared then up with Gateron Browns (not bad for the beginners).plugins  telescope.nvim - by far the most used plugin  vim-cool - removes highlighted texts after buffer search when hit return.  mason.nvim - lets me install lsps, formatters, linters &amp; daps on the go.image credits xkcd.com",
            "content_html": "<p>Configuration that I mention here are tailored in such a manner that I seek comfort in.You can find all my configuration in <a href=\"https://www.github.com/shiyanshirani/dotfiles\" target=\"_blank\">dotfiles</a> repository which I try to keep updated on frequent basis.</p><p><img src=\"/assets/setting_up_dev_environment_comic.png\" alt=\"coding-comic\" /></p><ol>  <li>    <p><a href=\"https://support.apple.com/kb/SP819?locale=en_US\" target=\"_blank\">MacBook Pro 2020 (Intel)</a> - with this being my daily driver for work as well has personal use, it never failed me to get the work done with ease, if only I could ask for update is for Finder, sometimes it could get a lot more difficult to do the straight-forward chores.</p>  </li>  <li>    <p><a href=\"https://github.com/alacritty/alacritty\" target=\"_blank\">alacritty</a> - the most light-weighted terminal ever came across, as it is a terminal emulator it doesn’t come with tab support so for that I complement it with <a href=\"https://github.com/tmux/tmux/wiki/Getting-Started\" target=\"_blank\">tmux</a> with a cheeky way of using keymapings found on <a href=\"https://www.joshmedeski.com/posts/macos-keyboard-shortcuts-for-tmux/\" target=\"_blank\">Josh Medeski’s notion</a></p>  </li>  <li>    <p><a href=\"https://github.com/koekeishiya/yabai\" target=\"_blank\">yabai</a> - a tiling management tool that snaps in tiles at lightining-fast speed which puts the native full-screen app tiling for macOS to absolute shame. <em>it’s <a href=\"https://i3wm.org/\" target=\"_blank\">i3</a> for unix.</em> I twin it with <a href=\"https://github.com/koekeishiya/skhd\" target=\"_blank\">skhd</a> for keymapping with the addition of system-wide maps.</p>  </li>  <li>    <p><a href=\"https://www.google.com\">nvim/vim</a> - personalized development environment (<em>PDE</em>). small-dive into my most used <a href=\"#plugins\">plugins</a> and <a href=\"#story time\"><em>story time</em></a></p>  </li>  <li>    <p>firefox -</p>  </li></ol><p><img src=\"/assets/firefox.png\" width=\"auto\" height=\"auto\" /></p><pre><code class=\"language-bash\">os:         macOS Ventura (13.0.1)shell:      zshterminal:   alacrittywm:         yabai</code></pre><p>/divOne of the hobbies I had way back since 2016 was for keyboards,  I spent ridiculous numbers of hours star-gazing <a href=\"https://www.reddit.com/r/mkindia/\" taget=\"_blank\">r/mkindia</a> and <a href=\"https://www.reddit.com/r/MechanicalKeyboards/\" target=\"_blank\">r/MechanicalKeyboards</a>, So I bought <a href=\"https://www.banggood.in/GAMAKAY-TK68-Mechanical-Keyboard-68-Keys-Triple-Mode-Connection-Wired-Type-C-or-BT5_0-or-2_4G-Wireless-with-Receiver-Gateron-Switch-XDA-Profile-PBT-Keycaps-Hot-Swappable-RGB-Gaming-Keyboard-p-1837263.html?cur_warehouse=CN&amp;ID=515632\" target=\"_blank\">Gamakay TK68</a> in 2020 and geared then up with Gateron Browns (<em>not bad for the beginners</em>).</p><p><img src=\"/assets/gamakay.png\" width=\"auto\" height=\"auto\" /></p><h1 id=\"plugins\">plugins</h1><ol>  <li><code>telescope.nvim</code> - by far the most used plugin</li>  <li><code>vim-cool</code> - removes highlighted texts after buffer search when hit <code>return</code>.</li>  <li><code>mason.nvim</code> - lets me install lsps, formatters, linters &amp; daps on the go.</li></ol><hr /><p>image credits <a href=\"https://xkcd.com\">xkcd.com</a></p>",
            "url": "http://localhost:4000/2022/11/28/setting-up-dev-environment",



            "tags": ["python","tools"],

            "date_published": "2022-11-28T00:00:00+05:30",
            "date_modified": "2022-11-28T00:00:00+05:30",

                "author":  {
                "name": "Shiyan Shirani",
                "url": null,
                "avatar": null
                }


        }

    ]
}
