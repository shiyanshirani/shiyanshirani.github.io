{
    "version": "https://jsonfeed.org/version/1",
    "title": "Shiyan Shirani",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "bits of work & life.",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,

    "author":  {
        "name": "Shiyan Shirani",
        "url": null,
        "avatar": null
    },

"items": [

        {
            "id": "http://localhost:4000/2023/05/05/python-context-managers",
            "title": "wait, you use context-managers?",
            "summary": null,
            "content_text": "Memory leaks?! pfft! my good ol’ Python handles everything for me. Well, we all wish this could have been true, but that’s not the case. Before getting to know context managers, let me highlight the usage of with statement. Let’s see it with the help of a code.with open('sample.txt', 'w') as file:    file.write('blah')but what if deadlines are near and you’re throwing the most complex macros at your code to make that deadline possible and exploit Python with a poor choice of code likefile = open('sample.txt')file.write('blah')file.close()Looks good? let’s move on with life and wait for that appraisal?  If you are also thinking like that then you’re in the wrong. There are few but major things that you overlooked that can shoot you in the feet,what if file.write() runs into an error and never reaches file.close()? and that’s how a memory leak is produced because you can never go back to that piece of run because it failed in execution.Let me break the above code into verbose way of Python and the correct way.file = open('sample.txt')try:    file.write('blah')finally:    file.close()Now we got the big guns, our near and dear try-catch statements which will help us deal with exceptions and how to handle them and that is the exact way how with statement works under the hood.Now we shall proceed with context-managers and how we can make our own class-based or function-based with statements.To do so all we need is to add __enter__ &amp; __exit__ dunder methods.class-basedclass Manager:    def __init__(self, name):        self.name = name    def __enter__(self):        self.file = open(self.name, 'w')        return self.file    def __exit__(self, exc_type, exc_val, exc_tb):        if self.file:            self.file.close()$ usage:with Manager('sample.txt') as f:    f.write('blah')function-basedfrom contextlib import contextmanager@contextmanagerdef manage_file(name: str):    try:        file = open(name, 'w')    finally:        file.close()$ usage:with manage_file('sample.txt') as file:    file.write('blah')and that’s how we make our own context-manager from scratch. if all of this was overwhelming and you wish not to care about this by yourself; you can use fuckit package in your codebase to handle all the error that has been there since the dawn of mankind and also in the literal sense.Good to knows  Fixing a Tough Memory Leak in Python  Tracking Down a Python Memory Leakuntil next time.",
            "content_html": "<p><img src=\"/assets/hard_reboot.png\" alt=\"memory-leak\" /></p><p><em>Memory leaks?! pfft! my good ol’ Python handles everything for me</em>. Well, we all wish this could have been true, but that’s not the case. Before getting to know <code>context managers</code>, let me highlight the usage of <code>with</code> statement. Let’s see it with the help of a code.</p><pre><code class=\"language-python\">with open('sample.txt', 'w') as file:    file.write('blah')</code></pre><p>but what if deadlines are near and you’re throwing the most complex macros at your code to make that deadline possible and exploit Python with a poor choice of code like</p><pre><code class=\"language-python\">file = open('sample.txt')file.write('blah')file.close()</code></pre><p><em>Looks good? let’s move on with life and wait for that appraisal?</em> <br /> <br />If you are also thinking like that then you’re in the wrong. There are few but major things that you overlooked that can shoot you in the feet,what if <code>file.write()</code> runs into an error and never reaches <code>file.close()</code>? and that’s how a memory leak is produced because you can never go back to that piece of run because it failed in execution.</p><p>Let me break the above code into verbose way of Python and <em>the</em> correct way.</p><pre><code class=\"language-python\">file = open('sample.txt')try:    file.write('blah')finally:    file.close()</code></pre><p>Now we got the big guns, our near and dear <code>try-catch</code> statements which will help us deal with exceptions and how to handle them and that is the exact way how <code>with</code> statement works under the hood.</p><p>Now we shall proceed with <code>context-managers</code> and how we can make our own <em>class-based</em> or <em>function-based</em> <code>with</code> statements.To do so all we need is to add <code>__enter__</code> &amp; <code>__exit__</code> dunder methods.</p><h4 id=\"class-based\">class-based</h4><pre><code class=\"language-python\">class Manager:    def __init__(self, name):        self.name = name    def __enter__(self):        self.file = open(self.name, 'w')        return self.file    def __exit__(self, exc_type, exc_val, exc_tb):        if self.file:            self.file.close()$ usage:with Manager('sample.txt') as f:    f.write('blah')</code></pre><h4 id=\"function-based\">function-based</h4><pre><code class=\"language-python\">from contextlib import contextmanager@contextmanagerdef manage_file(name: str):    try:        file = open(name, 'w')    finally:        file.close()$ usage:with manage_file('sample.txt') as file:    file.write('blah')</code></pre><p>and that’s how we make our own <code>context-manager</code> from scratch. <br /></p><p>if all of this was <em>overwhelming</em> and you wish not to care about this by yourself; you can use <a href=\"https://pypi.org/project/fuckit/\" target=\"_blank\"><em>fuckit</em></a> package in your codebase to handle all the error that has been there since the dawn of mankind and also in the literal sense.<br /></p><p>Good to knows</p><ul>  <li><a href=\"https://news.ycombinator.com/item?id=18632125\" target=\"_blank\">Fixing a Tough Memory Leak in Python</a></li>  <li><a href=\"https://news.ycombinator.com/item?id=13123478\" target=\"_blank\">Tracking Down a Python Memory Leak</a></li></ul><p><br /><em>until next time.</em></p>",
            "url": "http://localhost:4000/2023/05/05/python-context-managers",



            "tags": ["python","tech","work"],

            "date_published": "2023-05-05T00:00:00+05:30",
            "date_modified": "2023-05-05T00:00:00+05:30",

                "author":  {
                "name": "Shiyan Shirani",
                "url": null,
                "avatar": null
                }


        },

        {
            "id": "http://localhost:4000/2023/02/02/low-level-python-operations",
            "title": "you're going to love dis",
            "summary": null,
            "content_text": "I always used to wonder how python is interpreted and how does it exactly work under the hood during my journey of learning Python.As Python is an interpreted language, I was wondered how this the interpretation works under the hood.  The best practice is to reverse engineer the problem to its component parts. This is going to take it to the byte level.The dis module supports the analysis of CPython bytecode by disassembling it, with the help of dis you can see what byte level operations are being done by your code.Enough details, let’s see it in action. I made a foo.py file with a very trivial function for showcasing.import disdef run(x: int) -&gt; int:    return x + 1if __name__ == \"__main__\":    dis.dis(run)&gt;&gt; python foo.py 4   0 LOAD_FAST                0 (x)     2 LOAD_CONST               1 (1)     4 BINARY_ADD     6 RETURN_VALUELOAD_FAST: is used for local variables, accessing the value in an array by index LOAD_CONST: instruction is used to load a constant onto the stack BINARY_ADD : is used to add the two values RETURN_VALUE : is used to return this value from the function ",
            "content_html": "<p>I always used to wonder how python is interpreted and how does it exactly work under the hood during my journey of learning Python.As Python is an interpreted language, I was wondered how this the interpretation works under the hood.</p><blockquote>  <p>The best practice is to reverse engineer the problem to its component parts. This is going to take it to the byte level.</p></blockquote><p>The dis module supports the analysis of <code>CPython</code> bytecode by disassembling it, with the help of <code>dis</code> you can see what byte level operations are being done by your code.<br /><br /></p><p>Enough details, let’s see it in action. I made a <code>foo.py</code> file with a very trivial function for showcasing.</p><pre><code class=\"language-python3\">import disdef run(x: int) -&gt; int:    return x + 1if __name__ == \"__main__\":    dis.dis(run)</code></pre><pre><code class=\"language-bash\">&gt;&gt; python foo.py 4   0 LOAD_FAST                0 (x)     2 LOAD_CONST               1 (1)     4 BINARY_ADD     6 RETURN_VALUE</code></pre><p><code>LOAD_FAST</code>: is used for local variables, accessing the value in an array by index <br /><code>LOAD_CONST</code>: instruction is used to load a constant onto the stack <br /><code>BINARY_ADD</code> : is used to add the two values <br /><code>RETURN_VALUE</code> : is used to return this value from the function <br /></p>",
            "url": "http://localhost:4000/2023/02/02/low-level-python-operations",





            "date_published": "2023-02-02T00:00:00+05:30",
            "date_modified": "2023-02-02T00:00:00+05:30",

                "author":  {
                "name": "Shiyan Shirani",
                "url": null,
                "avatar": null
                }


        },

        {
            "id": "http://localhost:4000/2023/01/02/neo-brutualism-art",
            "title": "neo-brutualism-art",
            "summary": null,
            "content_text": "Today’s rant won’t be much about tech but instead it’ll be touching user interface side of the world that I somehow care about (ಠ⌣ಠ). Very recently I stumbled across a unique niche of art called Neo-Brutualism or Neu-Brutualism. I would be calling it Neo Brutualism for the rest of the rant. I don’t consider myself as a very colorful or artistic of a kind, personally I have an eye for monochromatic consistent look or how exactly an old engineering wiki page resembles like. I would prefer the first born reddit UI anyday over websites which might look bombarded with hardcore visuals which would look appealing at the first glance but could be taxing after frequent visits like kprverse to which I have no hate, kudos to the frontend team. Anyways, enough rant about how I like things, I would come back to the the topic of where I first saw the concept of Neo-Brutualism, I came across gumroad to get my hands on a wallpaper pack  where I noted the peculiar or should I say unpredictable color pallete of the website with the bold elegant choice of typography.and that led me to learn more about this design concept. So I wasn’t aware what kind of style it is so I took a screenshot of the website; reverse searched the image leading to pinterest, where much wasn’t discovered but a lot of interesting concepts of brutualism concept was portrayed in context of architecture that is to say:",
            "content_html": "<p>Today’s rant won’t be much about tech but instead it’ll be touching user interface side of the world that I somehow care about (ಠ⌣ಠ). <br /><br />Very recently I stumbled across a unique niche of art called <code>Neo-Brutualism</code> or <code>Neu-Brutualism</code>. I would be calling it Neo Brutualism for the rest of the rant. I don’t consider myself as a very <em>colorful or artistic</em> of a kind, personally I have an eye for monochromatic consistent look or how exactly an old engineering wiki page resembles like. I would prefer the first born reddit UI anyday over websites which might look bombarded with hardcore visuals which would look appealing at the first glance but could be taxing after frequent visits like <a href=\"https://kprverse.com/\">kprverse</a> to which I have no hate, <em>kudos to the frontend team</em>. Anyways, enough rant about how I like things, I would come back to the the topic of where I first saw the concept of <code>Neo-Brutualism</code>, I came across <a href=\"https://gumroad.com/\">gumroad</a> to get my hands on a wallpaper pack  where I noted the peculiar or should I say unpredictable color pallete of the website with the bold elegant choice of typography.</p><p><a href=\"/assets/gumroad_website.png\"><img src=\"/assets/gumroad_website.png\" alt=\"gumroad-website\" /></a></p><p>and that led me to learn more about this design concept. So I wasn’t aware what kind of style it is so I took a screenshot of the website; reverse searched the image leading to pinterest, where much wasn’t discovered but a lot of interesting concepts of <code>brutualism</code> concept was portrayed in context of architecture that is to say:</p>",
            "url": "http://localhost:4000/2023/01/02/neo-brutualism-art",



            "tags": ["life","art","rant"],

            "date_published": "2023-01-02T00:00:00+05:30",
            "date_modified": "2023-01-02T00:00:00+05:30",

                "author":  {
                "name": "Shiyan Shirani",
                "url": null,
                "avatar": null
                }


        },

        {
            "id": "http://localhost:4000/2022/11/28/setting-up-dev-environment",
            "title": "setting up my dev environment",
            "summary": null,
            "content_text": "Configuration that I mention here are tailored in such a manner that I seek comfort in.You can find all my configuration in dotfiles repository which I try to keep updated on frequent basis.      MacBook Pro 2020 (Intel) - with this being my daily driver for work as well has personal use, it never failed me to get the work done with ease, if only I could ask for update is for Finder, sometimes it could get a lot more difficult to do the straight-forward chores.        alacritty - the most light-weighted terminal ever came across, as it is a terminal emulator it doesn’t come with tab support so for that I complement it with tmux with a cheeky way of using keymapings found on Josh Medeski’s notion        yabai - a tiling management tool that snaps in tiles at lightining-fast speed which puts the native full-screen app tiling for macOS to absolute shame. I twin it with skhd for keymapping with the addition of system-wide maps.        nvim/vim - personalized development environment (PDE). small-dive into my most used plugins.        firefox - paired with Vimium  os:         macOS Ventura (13.0.1)shell:      zshterminal:   alacrittywm:         yabaiOne of the hobbies I had way back since 2016 was for keyboards,  I spent ridiculous numbers of hours star-gazing r/mkindia and r/MechanicalKeyboards, So I bought Gamakay TK68 in 2020 and geared then up with Gateron Browns (not bad for the beginners).plugins  telescope.nvim - by far the most used plugin  vim-cool - removes highlighted texts after buffer search when hit return.  mason.nvim - lets me install lsps, formatters, linters &amp; daps on the go.image credits xkcd.com",
            "content_html": "<p>Configuration that I mention here are tailored in such a manner that I seek comfort in.You can find all my configuration in <a href=\"https://www.github.com/shiyanshirani/dotfiles\" target=\"_blank\">dotfiles</a> repository which I try to keep updated on frequent basis.</p><p><img src=\"/assets/setting_up_dev_environment_comic.png\" alt=\"coding-comic\" /></p><ol>  <li>    <p><a href=\"https://support.apple.com/kb/SP819?locale=en_US\" target=\"_blank\">MacBook Pro 2020 (Intel)</a> - with this being my daily driver for work as well has personal use, it never failed me to get the work done with ease, if only I could ask for update is for Finder, sometimes it could get a lot more difficult to do the straight-forward chores.</p>  </li>  <li>    <p><a href=\"https://github.com/alacritty/alacritty\" target=\"_blank\">alacritty</a> - the most light-weighted terminal ever came across, as it is a terminal emulator it doesn’t come with tab support so for that I complement it with <a href=\"https://github.com/tmux/tmux/wiki/Getting-Started\" target=\"_blank\">tmux</a> with a cheeky way of using keymapings found on <a href=\"https://www.joshmedeski.com/posts/macos-keyboard-shortcuts-for-tmux/\" target=\"_blank\">Josh Medeski’s notion</a></p>  </li>  <li>    <p><a href=\"https://github.com/koekeishiya/yabai\" target=\"_blank\">yabai</a> - a tiling management tool that snaps in tiles at lightining-fast speed which puts the native full-screen app tiling for macOS to absolute shame. I twin it with <a href=\"https://github.com/koekeishiya/skhd\" target=\"_blank\">skhd</a> for keymapping with the addition of system-wide maps.</p>  </li>  <li>    <p><a href=\"https://www.google.com\">nvim/vim</a> - personalized development environment (<em>PDE</em>). small-dive into my most used <a href=\"#plugins\">plugins</a>.</p>  </li>  <li>    <p>firefox - paired with <a href=\"https://addons.mozilla.org/en-US/firefox/addon/vimium-ff/\" target=\"_blank\">Vimium</a></p>  </li></ol><p><img src=\"/assets/firefox.png\" width=\"auto\" height=\"auto\" /></p><pre><code class=\"language-bash\">os:         macOS Ventura (13.0.1)shell:      zshterminal:   alacrittywm:         yabai</code></pre><p>One of the hobbies I had way back since 2016 was for keyboards,  I spent ridiculous numbers of hours star-gazing <a href=\"https://www.reddit.com/r/mkindia/\" taget=\"_blank\">r/mkindia</a> and <a href=\"https://www.reddit.com/r/MechanicalKeyboards/\" target=\"_blank\">r/MechanicalKeyboards</a>, So I bought <a href=\"https://www.banggood.in/GAMAKAY-TK68-Mechanical-Keyboard-68-Keys-Triple-Mode-Connection-Wired-Type-C-or-BT5_0-or-2_4G-Wireless-with-Receiver-Gateron-Switch-XDA-Profile-PBT-Keycaps-Hot-Swappable-RGB-Gaming-Keyboard-p-1837263.html?cur_warehouse=CN&amp;ID=515632\" target=\"_blank\">Gamakay TK68</a> in 2020 and geared then up with Gateron Browns (<em>not bad for the beginners</em>).</p><p><img src=\"/assets/gamakay.png\" width=\"auto\" height=\"auto\" /></p><h1 id=\"plugins\">plugins</h1><ol>  <li><code>telescope.nvim</code> - by far the most used plugin</li>  <li><code>vim-cool</code> - removes highlighted texts after buffer search when hit <code>return</code>.</li>  <li><code>mason.nvim</code> - lets me install lsps, formatters, linters &amp; daps on the go.</li></ol><p>image credits <a href=\"https://xkcd.com\">xkcd.com</a></p>",
            "url": "http://localhost:4000/2022/11/28/setting-up-dev-environment",



            "tags": ["python","tools"],

            "date_published": "2022-11-28T00:00:00+05:30",
            "date_modified": "2022-11-28T00:00:00+05:30",

                "author":  {
                "name": "Shiyan Shirani",
                "url": null,
                "avatar": null
                }


        }

    ]
}
