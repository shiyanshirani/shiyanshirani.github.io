<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Shiyan Shirani</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2023-04-22T17:28:44+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Shiyan Shirani</name>
   <email>shiyan99s@gmail.com</email>
 </author>


 <entry>
   <title>you&apos;re going to love dis</title>
   <link href="http://localhost:4000/2023/02/02/low-level-python-operations"/>
   <updated>2023-02-02T00:00:00+05:30</updated>
   <id>http://localhost:4000/2023/02/02/low-level-python-operations</id>
   <content type="html">&lt;p&gt;I always used to wonder how python is interpreted and how does it exactly work under the hood during my journey of learning Python.
As Python is an interpreted language, I was wondered how this the interpretation works under the hood.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best practise is to reverse engineer the problem to its component parts. This is going to take it to the byte level.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The dis module supports the analysis of &lt;code&gt;CPython&lt;/code&gt; bytecode by disassembling it, with the help of &lt;code&gt;dis&lt;/code&gt; you can see what byte level operations are being done by your code.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Enough details, let’s see it in action. I made a &lt;code&gt;foo.py&lt;/code&gt; file with a very trivial function for showcasing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;import dis
def run(x: int) -&amp;gt; int:
    return x + 1

if __name__ == &quot;__main__&quot;:
    dis.dis(run)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt; python foo.py
 4   0 LOAD_FAST                0 (x)
     2 LOAD_CONST               1 (1)
     4 BINARY_ADD
     6 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;LOAD_FAST&lt;/strong&gt;: is used for local variables, accessing the value in an array by index &lt;br /&gt;
&lt;strong&gt;LOAD_CONST&lt;/strong&gt;:&lt;/p&gt;

</content>
 </entry>

 <entry>
   <title>Neo-Brutualism Art</title>
   <link href="http://localhost:4000/2023/01/02/neo-brutualism-art"/>
   <updated>2023-01-02T00:00:00+05:30</updated>
   <id>http://localhost:4000/2023/01/02/neo-brutualism-art</id>
   <content type="html">
</content>
 </entry>

 <entry>
   <title>Semantic Searches</title>
   <link href="http://localhost:4000/2022/12/14/semantic-searches"/>
   <updated>2022-12-14T00:00:00+05:30</updated>
   <id>http://localhost:4000/2022/12/14/semantic-searches</id>
   <content type="html">
</content>
 </entry>

 <entry>
   <title>Setting up my dev environment</title>
   <link href="http://localhost:4000/2022/11/28/setting-up-dev-environment"/>
   <updated>2022-11-28T00:00:00+05:30</updated>
   <id>http://localhost:4000/2022/11/28/setting-up-dev-environment</id>
   <content type="html">&lt;p&gt;Configuration that I mention here are tailored in such a manner that I seek comfort in.
You can find all my configuration in &lt;a href=&quot;https://www.github.com/shiyanshirani/dotfiles&quot; target=&quot;_blank&quot;&gt;dotfiles&lt;/a&gt; repository which I try to keep updated on frequent basis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/setting_up_dev_environment_comic.png&quot; alt=&quot;coding-comic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://support.apple.com/kb/SP819?locale=en_US&quot; target=&quot;_blank&quot;&gt;MacBook Pro 2020 (Intel)&lt;/a&gt; - with this being my daily driver for work as well has personal use, it never failed me to get the work done with ease, if only I could ask for update is for Finder, sometimes it could get a lot more difficult to do the straight-forward chores.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/alacritty/alacritty&quot; target=&quot;_blank&quot;&gt;alacritty&lt;/a&gt; - the most light-weighted terminal ever came across, as it is a terminal emulator it doesn’t come with tab support so for that I complement it with &lt;a href=&quot;https://github.com/tmux/tmux/wiki/Getting-Started&quot; target=&quot;_blank&quot;&gt;tmux&lt;/a&gt; with a cheeky way of using keymapings found on &lt;a href=&quot;https://www.joshmedeski.com/posts/macos-keyboard-shortcuts-for-tmux/&quot; target=&quot;_blank&quot;&gt;Josh Medeski’s notion&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/koekeishiya/yabai&quot; target=&quot;_blank&quot;&gt;yabai&lt;/a&gt; - a tiling management tool that snaps in tiles at lightining-fast speed which puts the native full-screen app tiling for macOS to absolute shame. &lt;em&gt;it’s &lt;a href=&quot;https://i3wm.org/&quot; target=&quot;_blank&quot;&gt;i3&lt;/a&gt; for unix.&lt;/em&gt; I twin it with &lt;a href=&quot;https://github.com/koekeishiya/skhd&quot; target=&quot;_blank&quot;&gt;skhd&lt;/a&gt; for keymapping with the addition of system-wide maps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.google.com&quot;&gt;nvim/vim&lt;/a&gt; - personalized development environment (&lt;em&gt;PDE&lt;/em&gt;). small-dive into my most used &lt;a href=&quot;#plugins&quot;&gt;plugins&lt;/a&gt; and &lt;a href=&quot;#story time&quot;&gt;&lt;em&gt;story time&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;firefox -&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/firefox.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;os:         macOS Ventura (13.0.1)
shell:      zsh
terminal:   alacritty
wm:         yabai
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;/div
One of the hobbies I had way back since 2016 was for keyboards,  I spent ridiculous numbers of hours star-gazing &lt;a href=&quot;https://www.reddit.com/r/mkindia/&quot; taget=&quot;_blank&quot;&gt;r/mkindia&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/MechanicalKeyboards/&quot; target=&quot;_blank&quot;&gt;r/MechanicalKeyboards&lt;/a&gt;, So I bought &lt;a href=&quot;https://www.banggood.in/GAMAKAY-TK68-Mechanical-Keyboard-68-Keys-Triple-Mode-Connection-Wired-Type-C-or-BT5_0-or-2_4G-Wireless-with-Receiver-Gateron-Switch-XDA-Profile-PBT-Keycaps-Hot-Swappable-RGB-Gaming-Keyboard-p-1837263.html?cur_warehouse=CN&amp;amp;ID=515632&quot; target=&quot;_blank&quot;&gt;Gamakay TK68&lt;/a&gt; in 2020 and geared then up with Gateron Browns (&lt;em&gt;not bad for the beginners&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gamakay.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;plugins&quot;&gt;plugins&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;telescope.nvim&lt;/code&gt; - by far the most used plugin&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;vim-cool&lt;/code&gt; - removes highlighted texts after buffer search when hit &lt;code&gt;return&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;mason.nvim&lt;/code&gt; - lets me install lsps, formatters, linters &amp;amp; daps on the go.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;image credits &lt;a href=&quot;https://xkcd.com&quot;&gt;xkcd.com&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>


</feed>
