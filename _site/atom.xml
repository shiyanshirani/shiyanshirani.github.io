<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Shiyan Shirani</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2023-05-06T03:28:43+05:30</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Shiyan Shirani</name>
   <email>shiyan99s@gmail.com</email>
 </author>


 <entry>
   <title>wait, you use context-managers?</title>
   <link href="http://localhost:4000/2023/05/05/python-context-managers"/>
   <updated>2023-05-05T00:00:00+05:30</updated>
   <id>http://localhost:4000/2023/05/05/python-context-managers</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;/assets/hard_reboot.png&quot;&gt;&lt;img src=&quot;/assets/hard_reboot.png&quot; alt=&quot;memory-leak&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Memory leaks?! pfft! my good ol’ Python handles everything for me&lt;/em&gt;. Well, we all wish this could have been true, but that’s not the case. Before getting to know &lt;code&gt;context managers&lt;/code&gt;, let me highlight the usage of &lt;code&gt;with&lt;/code&gt; statement. Let’s see it with the help of a code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;with open(&apos;sample.txt&apos;, &apos;w&apos;) as file:
    file.write(&apos;blah&apos;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but what if deadlines are near and you’re throwing the most complex macros at your code to make that deadline possible and exploit Python with a poor choice of code like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;file = open(&apos;sample.txt&apos;)
file.write(&apos;blah&apos;)
file.close()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Looks good? let’s move on with life and wait for that appraisal?&lt;/em&gt; &lt;br /&gt; &lt;br /&gt;
If you are also thinking like that then you’re in the wrong. There are few but major things that you overlooked that can shoot you in the feet,
what if &lt;code&gt;file.write()&lt;/code&gt; runs into an error and never reaches &lt;code&gt;file.close()&lt;/code&gt;? and that’s how a memory leak is produced because you can never go back to that piece of run because it failed in execution.&lt;/p&gt;

&lt;p&gt;Let me break the above code into verbose way of Python and &lt;em&gt;the&lt;/em&gt; correct way.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;file = open(&apos;sample.txt&apos;)
try:
    file.write(&apos;blah&apos;)
finally:
    file.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we got the big guns, our near and dear &lt;code&gt;try-catch&lt;/code&gt; statements which will help us deal with exceptions and how to handle them and that is the exact way how &lt;code&gt;with&lt;/code&gt; statement works under the hood.&lt;/p&gt;

&lt;p&gt;Now we shall proceed with &lt;code&gt;context-managers&lt;/code&gt; and how we can make our own &lt;em&gt;class-based&lt;/em&gt; or &lt;em&gt;function-based&lt;/em&gt; &lt;code&gt;with&lt;/code&gt; statements.
To do so all we need is to add &lt;code&gt;__enter__&lt;/code&gt; &amp;amp; &lt;code&gt;__exit__&lt;/code&gt; dunder methods.&lt;/p&gt;

&lt;h4 id=&quot;class-based&quot;&gt;class-based&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;class Manager:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.file = open(self.name, &apos;w&apos;)
        return self.file

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.file:
            self.file.close()

$ usage:

with Manager(&apos;sample.txt&apos;) as f:
    f.write(&apos;blah&apos;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;function-based&quot;&gt;function-based&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from contextlib import contextmanager

@contextmanager
def manage_file(name: str):
    try:
        file = open(name, &apos;w&apos;)
    finally:
        file.close()

$ usage:

with manage_file(&apos;sample.txt&apos;) as file:
    file.write(&apos;blah&apos;)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and that’s how we make our own &lt;code&gt;context-manager&lt;/code&gt; from scratch.
&lt;br /&gt; &lt;br /&gt;
&lt;em&gt;until next time. :)&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>

 <entry>
   <title>you&apos;re going to love dis</title>
   <link href="http://localhost:4000/2023/02/02/low-level-python-operations"/>
   <updated>2023-02-02T00:00:00+05:30</updated>
   <id>http://localhost:4000/2023/02/02/low-level-python-operations</id>
   <content type="html">&lt;p&gt;I always used to wonder how python is interpreted and how does it exactly work under the hood during my journey of learning Python.
As Python is an interpreted language, I was wondered how this the interpretation works under the hood.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best practise is to reverse engineer the problem to its component parts. This is going to take it to the byte level.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The dis module supports the analysis of &lt;code&gt;CPython&lt;/code&gt; bytecode by disassembling it, with the help of &lt;code&gt;dis&lt;/code&gt; you can see what byte level operations are being done by your code.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Enough details, let’s see it in action. I made a &lt;code&gt;foo.py&lt;/code&gt; file with a very trivial function for showcasing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;import dis
def run(x: int) -&amp;gt; int:
    return x + 1

if __name__ == &quot;__main__&quot;:
    dis.dis(run)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&amp;gt;&amp;gt; python foo.py
 4   0 LOAD_FAST                0 (x)
     2 LOAD_CONST               1 (1)
     4 BINARY_ADD
     6 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;LOAD_FAST&lt;/strong&gt;: is used for local variables, accessing the value in an array by index &lt;br /&gt;
&lt;strong&gt;LOAD_CONST&lt;/strong&gt;:&lt;/p&gt;
</content>
 </entry>

 <entry>
   <title>neo-brutualism-art</title>
   <link href="http://localhost:4000/2023/01/02/neo-brutualism-art"/>
   <updated>2023-01-02T00:00:00+05:30</updated>
   <id>http://localhost:4000/2023/01/02/neo-brutualism-art</id>
   <content type="html">&lt;p&gt;Today’s rant won’t be much about tech but instead it’ll be touching user interface side of the world that I somehow care about (ಠ⌣ಠ). &lt;br /&gt;&lt;br /&gt;
Very recently I stumbled across a unique niche of art called &lt;code&gt;Neo-Brutualism&lt;/code&gt; or &lt;code&gt;Neu-Brutualism&lt;/code&gt;. I would be calling it Neo Brutualism for the rest of the rant. I don’t consider myself as a very &lt;em&gt;colorful or artistic&lt;/em&gt; of a kind, personally I have an eye for monochromatic consistent look or how exactly an old engineering wiki page resembles like. I would prefer the first born reddit UI anyday over websites which might look bombarded with hardcore visuals which would look appealing at the first glance but could be taxing after frequent visits like &lt;a href=&quot;https://kprverse.com/&quot;&gt;kprverse&lt;/a&gt; to which I have no hate, &lt;em&gt;kudos to the frontend team&lt;/em&gt;. Anyways, enough rant about how I like things, I would come back to the the topic of where I first saw the concept of &lt;code&gt;Neo-Brutualism&lt;/code&gt;, I came across &lt;a href=&quot;https://gumroad.com/&quot;&gt;gumroad&lt;/a&gt; to get my hands on a wallpaper pack  where I noted the peculiar or should I say unpredictable color pallete of the website with the bold elegant choice of typography.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/gumroad_website.png&quot;&gt;&lt;img src=&quot;/assets/gumroad_website.png&quot; alt=&quot;gumroad-website&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and that led me to learn more about this design concept. So I wasn’t aware what kind of style it is so I took a screenshot of the website; reverse searched the image leading to pinterest, where much wasn’t discovered but a lot of interesting concepts of &lt;code&gt;brutualism&lt;/code&gt; concept was portrayed in context of architecture that is to say:&lt;/p&gt;
</content>
 </entry>

 <entry>
   <title>semantic-searches</title>
   <link href="http://localhost:4000/2022/12/14/semantic-searches"/>
   <updated>2022-12-14T00:00:00+05:30</updated>
   <id>http://localhost:4000/2022/12/14/semantic-searches</id>
   <content type="html">
</content>
 </entry>

 <entry>
   <title>setting up my dev environment</title>
   <link href="http://localhost:4000/2022/11/28/setting-up-dev-environment"/>
   <updated>2022-11-28T00:00:00+05:30</updated>
   <id>http://localhost:4000/2022/11/28/setting-up-dev-environment</id>
   <content type="html">&lt;p&gt;Configuration that I mention here are tailored in such a manner that I seek comfort in.
You can find all my configuration in &lt;a href=&quot;https://www.github.com/shiyanshirani/dotfiles&quot; target=&quot;_blank&quot;&gt;dotfiles&lt;/a&gt; repository which I try to keep updated on frequent basis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/setting_up_dev_environment_comic.png&quot; alt=&quot;coding-comic&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://support.apple.com/kb/SP819?locale=en_US&quot; target=&quot;_blank&quot;&gt;MacBook Pro 2020 (Intel)&lt;/a&gt; - with this being my daily driver for work as well has personal use, it never failed me to get the work done with ease, if only I could ask for update is for Finder, sometimes it could get a lot more difficult to do the straight-forward chores.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/alacritty/alacritty&quot; target=&quot;_blank&quot;&gt;alacritty&lt;/a&gt; - the most light-weighted terminal ever came across, as it is a terminal emulator it doesn’t come with tab support so for that I complement it with &lt;a href=&quot;https://github.com/tmux/tmux/wiki/Getting-Started&quot; target=&quot;_blank&quot;&gt;tmux&lt;/a&gt; with a cheeky way of using keymapings found on &lt;a href=&quot;https://www.joshmedeski.com/posts/macos-keyboard-shortcuts-for-tmux/&quot; target=&quot;_blank&quot;&gt;Josh Medeski’s notion&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/koekeishiya/yabai&quot; target=&quot;_blank&quot;&gt;yabai&lt;/a&gt; - a tiling management tool that snaps in tiles at lightining-fast speed which puts the native full-screen app tiling for macOS to absolute shame. &lt;em&gt;it’s &lt;a href=&quot;https://i3wm.org/&quot; target=&quot;_blank&quot;&gt;i3&lt;/a&gt; for unix.&lt;/em&gt; I twin it with &lt;a href=&quot;https://github.com/koekeishiya/skhd&quot; target=&quot;_blank&quot;&gt;skhd&lt;/a&gt; for keymapping with the addition of system-wide maps.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.google.com&quot;&gt;nvim/vim&lt;/a&gt; - personalized development environment (&lt;em&gt;PDE&lt;/em&gt;). small-dive into my most used &lt;a href=&quot;#plugins&quot;&gt;plugins&lt;/a&gt; and &lt;a href=&quot;#story time&quot;&gt;&lt;em&gt;story time&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;firefox -&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/firefox.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;os:         macOS Ventura (13.0.1)
shell:      zsh
terminal:   alacritty
wm:         yabai
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One of the hobbies I had way back since 2016 was for keyboards,  I spent ridiculous numbers of hours star-gazing &lt;a href=&quot;https://www.reddit.com/r/mkindia/&quot; taget=&quot;_blank&quot;&gt;r/mkindia&lt;/a&gt; and &lt;a href=&quot;https://www.reddit.com/r/MechanicalKeyboards/&quot; target=&quot;_blank&quot;&gt;r/MechanicalKeyboards&lt;/a&gt;, So I bought &lt;a href=&quot;https://www.banggood.in/GAMAKAY-TK68-Mechanical-Keyboard-68-Keys-Triple-Mode-Connection-Wired-Type-C-or-BT5_0-or-2_4G-Wireless-with-Receiver-Gateron-Switch-XDA-Profile-PBT-Keycaps-Hot-Swappable-RGB-Gaming-Keyboard-p-1837263.html?cur_warehouse=CN&amp;amp;ID=515632&quot; target=&quot;_blank&quot;&gt;Gamakay TK68&lt;/a&gt; in 2020 and geared then up with Gateron Browns (&lt;em&gt;not bad for the beginners&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gamakay.png&quot; width=&quot;auto&quot; height=&quot;auto&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;plugins&quot;&gt;plugins&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;telescope.nvim&lt;/code&gt; - by far the most used plugin&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;vim-cool&lt;/code&gt; - removes highlighted texts after buffer search when hit &lt;code&gt;return&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;mason.nvim&lt;/code&gt; - lets me install lsps, formatters, linters &amp;amp; daps on the go.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;image credits &lt;a href=&quot;https://xkcd.com&quot;&gt;xkcd.com&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>


</feed>
